version: '3.9'

services:
  postgres:
    image: postgres:16-alpine
    container_name: nist-reports-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nist_reports}
      POSTGRES_USER: ${POSTGRES_USER:-nist_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_me_in_production}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - nist-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nist_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nist-reports-backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-nist_user}:${POSTGRES_PASSWORD:-change_me_in_production}@postgres:5432/${POSTGRES_DB:-nist_reports}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-nist_reports}
      - POSTGRES_USER=${POSTGRES_USER:-nist_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-change_me_in_production}
      - BACKEND_PORT=${BACKEND_PORT:-8000}
      - DEBUG=${DEBUG:-true}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_cache:/app/__pycache__
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - nist-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: nist-reports-frontend
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - nist-network

volumes:
  postgres_data:
    driver: local
  backend_cache:
    driver: local

networks:
  nist-network:
    driver: bridge
